{
    "client": "Thunder Client",
    "collectionName": "exercise3-api",
    "dateExported": "2024-05-03T13:34:21.268Z",
    "version": "1.1",
    "folders": [
        {
            "_id": "ebfb9b8c-ac8f-4d7a-8567-0e3ab9cafcd5",
            "name": "Testing",
            "containerId": "",
            "created": "2024-05-03T12:19:21.120Z",
            "sortNum": 10000
        },
        {
            "_id": "f78f8198-f856-4fd5-8462-4196c162d1a8",
            "name": "Movie",
            "containerId": "",
            "created": "2024-05-03T12:19:21.121Z",
            "sortNum": 20000
        },
        {
            "_id": "3e553f37-4999-4759-b844-f00e0f5416cc",
            "name": "Genre",
            "containerId": "",
            "created": "2024-05-03T12:19:21.122Z",
            "sortNum": 30000
        }
    ],
    "requests": [
        {
            "_id": "dcb5ef1c-8a1d-4fa2-8b15-40d6aaa424f0",
            "colId": "66712048-6888-4324-9157-e4bb9fc5d760",
            "containerId": "ebfb9b8c-ac8f-4d7a-8567-0e3ab9cafcd5",
            "name": "/health",
            "url": "/health",
            "method": "GET",
            "sortNum": 10000,
            "created": "2024-05-03T12:19:21.120Z",
            "modified": "2024-05-03T12:19:21.120Z",
            "headers": [],
            "params": [],
            "tests": [],
            "postReq": {
                "inlineScripts": [
                    {
                        "script": [
                            "tc.test(\"There is a linked environment called 'express-api-env\", () => {",
                            "    const {environmentName} = tc.info",
                            "    ",
                            "    expect(environmentName).to.be.ok;",
                            "    expect(environmentName).to.equal(\"express-api-env\");",
                            "});",
                            "",
                            "tc.test(\"The environment variable 'host' exists\", () => {",
                            "      expect(tc.getVar(\"host\")).to.be.ok",
                            "})",
                            "",
                            "tc.test(\"Ensure 'host' environment variable and collection settings set expected Base URL\", () => {",
                            "      const relativePath = tc.request.url.replace(tc.getVar(\"host\") + \"/api\", \"\")",
                            "      ",
                            "      expect(tc.getVar(\"host\")).to.equal(\"localhost:3000\");",
                            "    ",
                            "      expect(relativePath).to.equal(\"/health\");",
                            "})",
                            "",
                            "tc.test(\"Should respond with status 200\", () => {",
                            "      expect(tc.response.status).to.equal(200);",
                            "})",
                            "",
                            "tc.test(\"Should respond with relevant data in JSON: {success: true, data }\", () => {",
                            "      const responseBody = tc.response.json",
                            "    ",
                            "      expect(responseBody).to.be.an(\"object\");",
                            "      ",
                            "      expect(responseBody).to.have.property(\"success\");",
                            "      expect(responseBody).to.have.property(\"data\");",
                            "      ",
                            "      expect(responseBody.success).to.equal(true);",
                            "})"
                        ]
                    }
                ]
            }
        },
        {
            "_id": "4415c04e-cfd7-4a26-837c-f78c8ae2d5df",
            "colId": "66712048-6888-4324-9157-e4bb9fc5d760",
            "containerId": "f78f8198-f856-4fd5-8462-4196c162d1a8",
            "name": "/movies",
            "url": "/movies",
            "method": "GET",
            "sortNum": 20000,
            "created": "2024-05-03T12:19:21.121Z",
            "modified": "2024-05-03T13:30:09.104Z",
            "headers": [],
            "params": [],
            "tests": []
        },
        {
            "_id": "cc69fd4c-e661-4afc-a0cf-f2fa71978c2e",
            "colId": "66712048-6888-4324-9157-e4bb9fc5d760",
            "containerId": "3e553f37-4999-4759-b844-f00e0f5416cc",
            "name": "/genres",
            "url": "/genres",
            "method": "GET",
            "sortNum": 20000,
            "created": "2024-05-03T12:19:21.122Z",
            "modified": "2024-05-03T13:29:24.056Z",
            "headers": [],
            "params": [],
            "tests": []
        },
        {
            "_id": "a554c7ee-5f6c-4702-abb4-f52311c5c2ce",
            "colId": "66712048-6888-4324-9157-e4bb9fc5d760",
            "containerId": "3e553f37-4999-4759-b844-f00e0f5416cc",
            "name": "/genres/:id",
            "url": "/genres/802cbb0e-bf47-49a6-beca-6f22f0d50f88",
            "method": "PUT",
            "sortNum": 30000,
            "created": "2024-05-03T12:19:37.710Z",
            "modified": "2024-05-03T13:29:48.240Z",
            "headers": [],
            "params": [],
            "body": {
                "type": "json",
                "raw": "{\n  \"name\": \"Science Fiction\"\n}",
                "form": []
            },
            "tests": []
        },
        {
            "_id": "9788aff5-eb39-4619-bf06-1bfee40fb50c",
            "colId": "66712048-6888-4324-9157-e4bb9fc5d760",
            "containerId": "3e553f37-4999-4759-b844-f00e0f5416cc",
            "name": "/genres/:id",
            "url": "/genres/f5d5e8a2-c1ab-44e7-936d-d6e7bcfbf313",
            "method": "DELETE",
            "sortNum": 40000,
            "created": "2024-05-03T12:19:39.673Z",
            "modified": "2024-05-03T13:06:08.540Z",
            "headers": [],
            "params": [],
            "tests": []
        }
    ],
    "settings": {
        "options": {
            "baseUrl": "{{host}}/api"
        },
        "postReq": {
            "inlineScripts": [
                {
                    "script": [
                        "tc.test(\"Verify server is running\", () => {",
                        "    expect(tc.response.status).to.not.equal(0);",
                        "});",
                        ""
                    ]
                }
            ]
        }
    }
}